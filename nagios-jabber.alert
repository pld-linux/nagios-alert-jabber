#!/usr/bin/python3 -u
# usage:
#   jabber.alert [-x] [-c config] [-a account_id][,otheraccount_id] [-t timeout ] [-J from_jid -P password] to_jid1 to_jid2 to_jid3

import os
import hashlib
import re
import sys
import getopt
import logging
import signal
import socket
import string
import time
import libxml2

from pyxmpp2.jid import JID
from pyxmpp2.message import Message
from pyxmpp2.client import Client
from pyxmpp2.settings import XMPPSettings
from pyxmpp2.interfaces import EventHandler, event_handler, QUIT
from pyxmpp2.streamevents import AuthorizedEvent, DisconnectedEvent

try:
    opts, args = getopt.getopt(sys.argv[1:], "J:P:a:b:c:ds:t:x")
except getopt.GetoptError as e:
    print("%s: %s " % (sys.argv[0], e), file=sys.stderr)
    sys.exit(1)

jids = []
html = False
debug = False
timeout = 20
cfg = "/etc/nagios/jabber-notify.ini"
tjid = None
body = ""
subject = "Nagios alert"
for o, a in opts:
    if o == '-b':
        body += a
    if o == '-c':
        cfg = a
    if o == '-d':
        debug = True
    if o == '-t':
        timeout = float(a)
    if o == '-x':
        html = True
    if o == '-J':
        tjid = a
    if o == '-P':
        jids.append({ 'jid': tjid, 'password': a })
    if o == '-s':
        subject = a
    if o == '-a':
        import configparser

        config = configparser.ConfigParser()
        config.read(cfg)

        for section in a.split(','):
            jids.append({ 'jid': config.get(section, 'jid'), 'password': config.get(section, 'password')})

socket.setdefaulttimeout(timeout)

recpt = args

for section in jids:
    if not section['jid'] or not section['password']:
        print("%s: jid (-J) and password (-P) are required for `%s'" % (sys.argv[0], section), file=sys.stderr)
        sys.exit(1)

if not jids:
    print("%s: no configured jid accounts found" % sys.argv[0], file=sys.stderr)
    sys.exit(1)

if not recpt:
    print("%s: recipient jids are required" % sys.argv[0], file=sys.stderr)
    sys.exit(1)

if debug:
    logger=logging.getLogger()
    logger.addHandler(logging.StreamHandler())
    logger.setLevel(logging.DEBUG)

if not body:
    stdin_body = ""
    for line in sys.stdin.readlines():
        stdin_body += line

    body += stdin_body

if len(body.strip()) == 0:
    body = "(nagios-jabber.alert warning: missing message body)";

class NagiosHandler(EventHandler):
    """Echo Bot implementation."""
    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def run(self):
        """Request client connection and start the main loop."""
        self.client.connect()
        self.client.run()

    def exit_gracefully(self, signum, frame):
        logging.info(u"Received signal {0}".format(signum))
        self.client.main_loop.quit()

    def disconnect(self):
        """Request disconnection and let the main loop run for a 2 more
        seconds for graceful disconnection."""
        self.client.disconnect()
        self.client.run(timeout = 2)

    @event_handler(AuthorizedEvent)
    def handle_authorized(self, event):
        if (html == True):
            import re
            message = re.sub('<.*?>', '', body)
            doc = libxml2.parseDoc('<body>' + body + '</body>')
            doc_element = doc.getRootElement().children
        else:
            message = body

        for r in recpt:
            jid_r = JID(r)
            msg = Message(to_jid = jid_r, body = message, subject = subject,
                            stanza_type = 'chat', thread = "Nagios")

            if (html == True):
                node = msg.add_new_content('http://jabber.org/protocol/xhtml-im', 'html')
                xbody = node.newChild(None, "body", None)
                html_ns = xbody.newNs('http://www.w3.org/1999/xhtml', None)
                xbody.setNs(html_ns)
                xbody.addChildList(doc_element.docCopyNodeList(xbody.doc))

            event.stream.send(msg)
        event.stream.disconnect()

    @event_handler(DisconnectedEvent)
    def handle_disconnected(self, event):
        """Quit the main loop upon disconnection."""
        return QUIT

    @event_handler()
    def handle_all(self, event):
        """Log all events."""
        logging.info(u"-- {0}".format(event))

err = []
for section in jids:
    for attempt in ('first', 'second'):
        jid = JID(section['jid'])
        resource = "Nagios/" + hashlib.md5(''.join(recpt).encode('utf-8')).hexdigest()[:10]
        if attempt == 'second':
            # if something went wrong the second time around, it's
            # most likely a resource name conflict on login, so let's
            # wait a bit, randomize the resource name and try again
            resource = resource + '/' + repr(os.getpid())
            time.sleep(0.8)
        if not jid.resource:
            jid = JID(jid.local, jid.domain, resource)

        settings = XMPPSettings({
                            u"password": section['password'],
                            u"software_name": "Nagios notify jabber",
                            u"starttls": True,
                            u"tls_verify_peer": True,
                            u"tls_cacert_file": "/etc/pki/tls/certs/ca-bundle.crt"
                            })

        handler = NagiosHandler()
        try:
            c = Client(jid, [handler], settings)
            try:
                c.connect()
                c.run()
            except KeyboardInterrupt:
                c.disconnect()
                logging.info(u"Disconnected due to KeyboardInterrupt")
                sys.exit(0)
            except Exception as e:
                err.append("ERROR1: %s: %s" % (jid, e))
                # don't try another attempt, jump straigt to
                # another section
                break
            else:
                c.disconnect()
                logging.info(u"Disconnected")
                # stop after first successful attempt at sending the msg
                sys.exit(0)
        except Exception as e:
            err.append("ERROR2: %s: %s" % (jid, e))

print("\n".join(err), file=sys.stderr)
sys.exit(1)
